import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Abstract class representing a general water cleaning method
abstract class WaterCleaning {
    private String description;

    public WaterCleaning(String description) {
        this.description = description;
    }

    public String getDescription() {
        return description;
    }

    // Abstract method to provide specific cleaning instructions
    public abstract String getInstructions();
}

// Class for boiling water cleaning method
class Boiling extends WaterCleaning {
    public Boiling() {
        super("Boiling Water");
    }

    @Override
    public String getInstructions() {
        return "1. Bring water to a rolling boil.\n" +
               "2. Boil for at least 1 minute (or 3 minutes at higher altitudes).\n" +
               "3. Let the water cool before using.";
    }
}

// Class for filtering water cleaning method
class Filtering extends WaterCleaning {
    public Filtering() {
        super("Filtering Water");
    }

    @Override
    public String getInstructions() {
        return "1. Use a clean cloth or coffee filter to remove large particles.\n" +
               "2. Use a water filter that meets EPA standards.\n" +
               "3. Follow the instructions for best results.";
    }
}

// Class for chemical treatment cleaning method
class ChemicalTreatment extends WaterCleaning {
    public ChemicalTreatment() {
        super("Chemical Treatment");
    }

    @Override
    public String getInstructions() {
        return "1. Use iodine or chlorine tablets as per package instructions.\n" +
               "2. Let the water sit for at least 30 minutes before drinking.\n" +
               "3. Ensure the tablets are fully dissolved.";
    }
}

// Main class for managing the water cleaning system
public class WaterCleaningManagementSystem {
    private List<WaterCleaning> cleaningMethods;

    public WaterCleaningManagementSystem() {
        cleaningMethods = new ArrayList<>();
        // Initialize cleaning methods
        cleaningMethods.add(new Boiling());
        cleaningMethods.add(new Filtering());
        cleaningMethods.add(new ChemicalTreatment());
    }

    public void displayMethods() {
        System.out.println("Available Water Cleaning Methods:");
        for (int i = 0; i < cleaningMethods.size(); i++) {
            System.out.println((i + 1) + ". " + cleaningMethods.get(i).getDescription());
        }
    }

    public void provideInstructions(int choice) {
        if (choice >= 1 && choice <= cleaningMethods.size()) {
            System.out.println("\nInstructions for " + cleaningMethods.get(choice - 1).getDescription() + ":");
            System.out.println(cleaningMethods.get(choice - 1).getInstructions());
        } else {
            System.out.println("Invalid choice. Please try again.");
        }
    }

    public static void main(String[] args) {
        WaterCleaningManagementSystem system = new WaterCleaningManagementSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            system.displayMethods();
            System.out.println("Select a method to view instructions (1-" + system.cleaningMethods.size() + ") or 0 to exit:");
            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
                continue;
            }

            if (choice == 0) {
                System.out.println("Exiting the system. Stay safe!");
                break;
            }
            system.provideInstructions(choice);
        }
        scanner.close();
    }
}
----------------------------------------------------------------------------------------------------------------------------
Tarcina 
TARCINA is designed to provide users with essential information 
and instructions on various methods for cleaning and purifying water
Explanation of the Code

Encapsulation: Each class (Boiling, Filtering, ChemicalTreatment) encapsulates 
its properties(like description) and provides public methods to access them.

Inheritance: The subclasses inherit from the abstract class WaterCleaning, 
promoting code reuse and creating a clear hierarchy of cleaning methods.

Polymorphism: The getInstructions method is overridden in each subclass to provide 
specific instructions for each type of water cleaning method.

Abstraction: The WaterCleaning class provides a common interface for all water 
cleaning methods without exposing the details of how each method is applied.

User Interaction
When the program runs, it presents a menu of water cleaning methods.
The user selects a method to view specific instructions on how to clean water safely.
The program continues to loop until the user chooses to exit by entering 0.

Error Handling
The program includes error handling for invalid menu choices and input parsing.
If a user inputs a non-integer value when prompted for a choice, the program will catch the exception and prompt the user again.

Conclusion
The Water Cleaning Management System demonstrates core OOP principles effectively while providing 
valuable information on how to ensure water safety through various cleaning methods. 
This example can be further expanded with additional cleaning methods, enhanced user interface features, 
or even integration with databases for storing user queries and feedback.
